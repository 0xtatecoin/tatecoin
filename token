// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Context contract to provide execution context information
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// ERC-20 interface definition
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface Ibusiness {
    function notifyTransfer(address from, address to, uint256 value) external;
}

// Uniswap V2 interface for swapping tokens
interface IUniswapV2Router02 {
    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function WETH() external pure returns (address);
    
    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
}

// Ownable contract to manage ownership, inheriting from Context
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// Tatecoin token contract implementing IERC20 and Ownable
contract Tatecoin is Context, IERC20, Ownable {
    string public name = "Tatecoin";
    string public symbol = "TTC";
    uint8 public decimals = 18;
    uint256 public override totalSupply;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private treasuryTaxPercentage;
    uint256 private businessTaxPercentage;
    address private treasuryAddress;
    address private businessAddress;
    address private constant deadAddress = 0x000000000000000000000000000000000000dEaD;

    IUniswapV2Router02 public uniswapV2Router;
    uint256 public swapThreshold;  

    mapping(address => bool) public isTaxExempted;
    address[] private taxExemptedAddresses;

    event TreasuryTaxUpdated(address recipient);
    event BusinessTaxUpdated(address recipient);
    event TaxExempted(address account, bool isExempted);
    event UniswapRouterUpdated(address newRouter);
    event TokenSwappedForETH(uint256 amountIn, uint256 amountOut, address recipient);
    event Debug(string message, uint256 value);
    event DebugAddress(string message, address addr);
    event SwapThresholdUpdated(uint256 threshold);

    constructor(address _treasuryAddress, address _businessAddress, address _uniswapV2Router) {
        treasuryTaxPercentage = 2;
        treasuryAddress = _treasuryAddress;
        businessTaxPercentage = 1;
        businessAddress = _businessAddress;
        swapThreshold = 1000;  
        uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);

        isTaxExempted[businessAddress] = true;
        taxExemptedAddresses.push(businessAddress);
        isTaxExempted[treasuryAddress] = true;
        taxExemptedAddresses.push(treasuryAddress);
        isTaxExempted[address(this)] = true;
        taxExemptedAddresses.push(address(this));
        isTaxExempted[_msgSender()] = true;
        taxExemptedAddresses.push(_msgSender());
        isTaxExempted[deadAddress] = true;
        taxExemptedAddresses.push(deadAddress);

        totalSupply = 100_000_000_000 * 10 ** uint256(decimals);
        _balances[_msgSender()] = totalSupply;
        emit Transfer(address(0), _msgSender(), totalSupply);
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");

        if (isTaxExempted[sender] || isTaxExempted[recipient]) {
            _balances[sender] = senderBalance - amount;
            _balances[recipient] += amount;
            emit Transfer(sender, recipient, amount);
        } else {
            uint256 treasuryTax = (amount * treasuryTaxPercentage) / 100;
            uint256 businessTax = (amount * businessTaxPercentage) / 100;
            uint256 totalTax = treasuryTax + businessTax;
            uint256 transferAmount = amount - totalTax;

            _balances[sender] = senderBalance - amount;

            _balances[recipient] += transferAmount;
            emit Transfer(sender, recipient, transferAmount);
            _balances[address(this)] += treasuryTax;
            _balances[businessAddress] += businessTax;
            emit Transfer(sender, address(this), totalTax);
            emit Transfer(address(this), businessAddress, businessTax);

            // Check if the contract balance exceeds the threshold and perform swap if necessary
            uint256 contractTokenBalance = _balances[address(this)];
            if (contractTokenBalance >= swapThreshold * 10**18) {
                _swapTokensForETH(contractTokenBalance, treasuryAddress);
            }
        }

        if (businessAddress != address(0) && sender != businessAddress) {
            Ibusiness(businessAddress).notifyTransfer(sender, recipient, amount);
        }
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function setTreasuryAddress(address recipient) public onlyOwner {
        treasuryAddress = recipient;
        emit TreasuryTaxUpdated(recipient);
    }

    function setBusinessAddress(address recipient) public onlyOwner {
        businessAddress = recipient;
        emit BusinessTaxUpdated(recipient);
    }

    function taxExempt(address account, bool isExempted) public onlyOwner {
        isTaxExempted[account] = isExempted;
        if (isExempted) {
            taxExemptedAddresses.push(account);
        } else {
            for (uint256 i = 0; i < taxExemptedAddresses.length; i++) {
                if (taxExemptedAddresses[i] == account) {
                    taxExemptedAddresses[i] = taxExemptedAddresses[taxExemptedAddresses.length - 1];
                    taxExemptedAddresses.pop();
                    break;
                }
            }
        }
        emit TaxExempted(account, isExempted);
    }

    function taxExempted() public view returns (address[] memory) {
        return taxExemptedAddresses;
    }

    function setUniswapV2Router(address _uniswapV2Router) public onlyOwner {
        uniswapV2Router = IUniswapV2Router02(_uniswapV2Router);
        emit UniswapRouterUpdated(_uniswapV2Router);
    }

    function setSwapThreshold(uint256 _threshold) public onlyOwner {
        swapThreshold = _threshold;
        emit SwapThresholdUpdated(_threshold);
    }

    function swapTokensForETH(uint256 tokenAmount) public onlyOwner {
        _swapTokensForETH(tokenAmount, treasuryAddress);
    }

    function _swapTokensForETH(uint256 tokenAmount, address recipient) internal {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // Get expected amountOut
        uint256[] memory amountsOut = uniswapV2Router.getAmountsOut(tokenAmount, path);
        uint256 amountOut = amountsOut[1];

        // Start with a minimum amount of 95% of the expected amount
        uint256 amountOutMin = (amountOut * 95) / 100;

        // Retry mechanism
        for (uint256 i = 0; i < 10; i++) {
            try uniswapV2Router.swapExactTokensForETH(
                tokenAmount,
                amountOutMin, // Minimum amount of ETH to accept
                path,
                recipient,
                block.timestamp + 10000
            ) {
                emit TokenSwappedForETH(tokenAmount, amountOutMin, recipient); 
                return;
            } catch (bytes memory) {
                emit Debug("Swap failed, retrying with lower amount", amountOutMin);
                amountOutMin = (amountOutMin * 95) / 100; // Reduce the minimum amount by another 5%
            }
        }

        // If all retries fail, revert with the last reason
        revert("Swap failed after multiple retries");
    }

    function TreasuryTaxInfo() public view returns (uint256, address) {
        return (treasuryTaxPercentage, treasuryAddress);
    }

    function BusinessTaxInfo() public view returns (uint256, address) {
        return (businessTaxPercentage, businessAddress);
    }
}
